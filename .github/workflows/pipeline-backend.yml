name: BSN Backend API Pipeline

on:
    push:
        branches:
          - ci/pipeline
        paths:
          - book-network-api/**
          - docker/backend
          - 'docker-compose.yml'
          - .github/workflows/*-backend.yml

jobs:
  compile:
    runs-on: ubuntu-latest
    #runs-on: self-hosted # Pour un VPS PERSO
    name: Compile project
    steps:
      -
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-jdk@v2
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Compile project
        run: |
          cd book-network-api
          ./mvnw clean compile


  unit-test:
    runs-on: ubuntu-latest

    #runs-on: self-hosted # Pour un VPS PERSO
    name: Unit test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-jdk@v2
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Running Unit test
        run: |
          cd book-network-api
          ./mvnw clean test


  build:
    runs-on: ubuntu-latest
    #runs-on: self-hosted # Pour un VPS PERSO
    name: Build project
    needs: [compile, unit-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-jdk@v2
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Build project
        run: |
          cd book-network-api
          ./mvnw clean package 
          

  build-image:
    runs-on: ubuntu-latest
    #runs-on: self-hosted # Pour un VPS PERSO
    name: Build Docker image
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-jdk@v2
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Build project
        run: |
          cd book-network-api
          ./mvnw clean package

      - name: Extract  project version
        id: extract_version
        run: |
          cd book-network-api
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: book-network-api
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/book-network-api:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/book-network-api:latest

          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}


  deploy:
    #runs-on: self-hosted # Pour un VPS PERSO
    runs-on: ubuntu-latest
    name: Deploy Backend
    needs: [build-image]
    steps:
      - name: Create deployment directory
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

      - name: Set ENV variables
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} << EOF
          export EMAIL_HOSTNAME=${{ secrets.EMAIL_HOST_NAME }}
          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd ci-cd 
          docker-compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d
          EOF